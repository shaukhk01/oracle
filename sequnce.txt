
SEQUENCE:
---------
Sequence is database object which is used to generate sequence of number's automatically 
Generally sequences are used to generate primary key values automatically.
Generally sequence is indenpendent database once sequence has been created then number of users simeltanously access that sequence.


SYNTAX:
create sequence sequence ename start with n increment by n minvalue n maxvalue n cycle/nocycle cache/nocache;

Every sequence database object having two pseudo columns if you want to generate sequence values or access sequence value then we are using sequence pseduo columns,these sequence psesudo columns are.

1:currval
2:nextval

syntax:
=======>
sequencename.currval


syntax:
=======>
sequencename.nextval

These sequence pseudo column used in ,INSERT,UPDATE,DELETE,SELECT statement

In oracle if you want to generate sequence value by using select statment then we must use dual table.

Syntax:

select sequencename.currval from dual;


Syntax:

select sequencename.nextval from dual;


sql>create sequence s1 start with 5 increment by 2 maxvalue 100;

sql>select s1.currval from dual;

ERROR:sequence s1.currval is not yet defined in this session

In oracle if you want to generate first sequence number then we must used nextval pseudo column  because currval psequeo column returns current value of sequence session if sequence session already having value 

sql>select s1.nextval from dual;
    5
sql>select s1.nextval from dual;
    7
sql>select s1.nextval from dual;
    9
sql>select s1.currval from dual;
    9

note:
Generally nextval is a globalize session where as currval is a localize session



sql>conn scott/tiger
session 1:

sql>create sequence s1;             |
sql>select s1.nextval from dual;    |
sql>select s1.nextval from dual;    | another session nextval will same but current value will be changed according to query execute.
sql>select s1.currval from dual;    |

In oracle we can also alter sequence parameter value by using alter command but we can not alter starting sequence number.
SYNTAX:
ALTER SEQUENCE SEQUENCENAME PARAMETERNAME NEWVALUE;

sql>Create sequence s1 start with 5 increment by 1 minvalue 3 maxvalue 100;

sql>select s1.nextval from dual;
    5

sql>select s1.nextval from dual;
    6

sql>select s1.nextval from dual;
    7
sql>alter sequence s1 increment by -1;

sql>select s1.nextval from dual;
    6
sql>/
    5
sql>/
    4
sql>/
    3

sql>/
Error:sequence s1.nextval goes below minvalue and cannot be instantiated

sql>Alter sequence s1 start with 4;

Error:cannot alter starting sequence number;

note:
In oracle sequence start with can not be less then min_value 

sql>CREATE SEQUENCE S1 START WITH 3 INCREMENT BY 1 MINVALUE 5;

ERROR:start with cannot be less than minvalue


In oracle if you wantt to generate primary key automatically then we must use sequence data base object 
example:
CREATE TABLE TEST(SNO NUMBER(10)PRIMARY KEY,NAME VARCHAR2(10));

sql>create sequence s1;
sql>insert into test(sno,name)values(s1.nextval,'&name');

Enter a value for name: a
Enter a value for name: b
Enter a value for name: c
Enter a value for name: d
Enter a value for name: e

sql>select * from test;
        SNO     NAME
--------------------
        1       a
        2       b
        3       c
        4       d
        5       e

sql>alter table test add rno number(10);

sql>select * from test;

        SNO         NAME        RNO
------------------------------------
        1           a
        2           b
        3           c
        4           d
        5           e

sql>create sequence s2 start with 1001;

sql>update test set rno=s2.nextval;

slq>select * from test;

        SNO         NAME        RNO
------------------------------------
        1           a           1001
        2           b           1002
        3           c           1003                               
        4           d           1004

IDENTITY COLUMN(12c):
================>
Oracle 12c introduce identity columns which is used to Generate sequence of number automatically in this case oracle server,
internally automatically creates system Generate sequence but these sequnce value are always start with 1[one] and also auto-incre-mented by one 
Oracle provided follwoing three clauses for identity column
These are 

1:Generated always as identity
2:Generated by default as identity
3:Generated by default on null as identity 


1:Generated always as identity:
===============================
Whenever we are using always as clause then we are not allowed to insert data into identity COLUMN

SYNTAX:
COLUMNNAME DATATYPE(SIZE)GENERATED ALWAYS AS IDENTITY

sql>create table b1(sno number(10)generated always as identity,name varchar2(20));

sql>insert into b1(name)values('&name');

Enter value for name:x

sql>/
Enter values for name:y

sql>select * from b1;

        SNO     NAME
--------------------
        1       x
        2       y
sql>insert into b1(sno,name)values(99,'z');

ERROR


2:Generated by default as identity:-
====================================>

When we are using by default clause then we are allowed to insert our own values into identity column



3:




In relational database genrating primary key automatically is also called as autoincrement concept
in oracle we are implementing auto increment concept by using sequnence data base object in oracle 12c we are using sequence pesudo column within default clause

Then we are not allowed to use pl/sql row level triger this is called new auto increment concept

syntax:
colname datatype(size)default sequencename.nextval primary key

sql>create sequence s1 start with 5;
sql>create table test(sno number(10)default s1.nextval primary key,name varchar2(10));


sql>insert into test(name)values('&name');
Enter value for name:b
sql>/
Enter value for name:c
sql>select * from test;

cache:
======>

Cache is memory area which is used to preallocate set of sequence number Generally cache memory area used to,improve performance of the sequence because whenever we are defining cache value oracle server Generate 
sequence number very fastly from cache memory area

In oracle whenever we are creating sequence then automatically that sequence is created with in hardisk whenever usedd requesting sequence by using sequence pesudo column then client tool first checks requested,
sequence is available in cache memory area whenever requested sequence is not available in cache memory area.   Then oracle server retrive sequence value from hard-disk in to cache memory area then only those,
sequence value return from cache memory area into client tool This default process very slowly retrive sequence value to over come this problem for accessing sequence value very fastly then oracle provided cache,
optional clause within sequence database object 

SYNTAXT
-------

CACHE ANYNUMBER

whenever we are defining cache value by using cache optional clause then oracle server pre allocate set of 
sequence number in cache memory area in this case whenever user requesting sequence vlaue by using sequence,
pesudo column then client tool directly retrives sequence values from cache memory area this process automat-ically reduced disk i/o that's why this process improve performance of the sequence,
But whenever system crashed the automatically cache value or lost 

note:
In oracle by default cache value is 20  if you want to view this default value then we are using
USER_SEQUENCES data dictionary

Example:
sql>create sequence s1;
sql>select * from user_sequences;

note:
In oracle cache minmum value is 2 
sql>create sequence s1 start with 1 cache 1;
Error:the number of values to cache must be greater than 1;


Cycle/nocycle:
--------------
In sequences whenever we are using cycle option once sequence value reach max value then it returns min value onwards 
example:
sql>Create sequence s1 start with 5 increment by 1 minvalue 3 maxvalue 8 cycle nocache;

sql>select s1.nextval from dual;

nocycle:-
---------
sql>create sequence s2 start with 5 increment by 1 minvalue 3 maxvalue 8 nocycle nocache;

sql>select s2.nextval from dual;
sql>/
sql>/
sql>/
sql>/
sql>/
ERROR:sequence  s2.nextval exceeds maxvalue and cannot be instantiated
note:
Whenever we are defining cycle clause then we must specify but this cache value must be less then one cycle.
otherwise we must use nocache optional clause

example:
SQL>create sequence s1 start with 5 increment by 1 minvalue 3 maxvalue 8 cycle;

ERROR:numberr to CACHE must be less than one cycle.

sql>create sequence s1 start with 5 increment by 1 minvalue 3 maxvalue 8 cycle cache 6;
ERRO:number to cache must be less than one cycle.

solution:
sql>create sequence s1 start with 5 increment by 1 minvalue 3 maxvalue 8 cycle cache 5;


In oracle we can also drop sequence by using drop sequence sequenceName;
In oracle all sequence information store under user_sequences data dictionary.
ex:
sql>desc user_sequence

